% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sdm_predict.R
\name{sdm_predict}
\alias{sdm_predict}
\title{Spatial predictions from individual and ensemble models}
\usage{
sdm_predict(
  models,
  pred,
  nchunk = 1,
  thr = NULL,
  con_thr = FALSE,
  predict_area = NULL,
  clamp = TRUE,
  pred_type = "cloglog"
)
}
\arguments{
\item{models}{list of one or more models fitted with fit_ or tune_ functions. In case use models fitted with fit_ensemble or esm_ family function only one model could be used. Usage models = mglm or models = list(mglm, mraf, mgbm)}

\item{pred}{SpatRaster. Raster layer with predictor variables. Names of layers must exactly
match those used in model fitting.}

\item{nchunk}{integer. Number of chunks to split data used to predict models (i.e., SpatRaster
used in pred argument). Predicting models in chunks helps reduce memory requirements in cases
where models are predicted for large scales and high resolution. Default = 1}

\item{thr}{character. Threshold used to get binary suitability values (i.e., 0,1). It is possible
to use more than one threshold type. It is mandatory to use the same threshold/s used to fit the
models. The following threshold types are available:
\itemize{
  \item lpt: The highest threshold at which there is no omission.
  \item equal_sens_spec: Threshold at which the sensitivity and specificity are equal.
  \item max_sens_spec: Threshold at which the sum of the sensitivity and specificity is the
  highest (aka threshold that maximizes the TSS).
  \item max_jaccard: The threshold at which the Jaccard index is the highest.
  \item max_sorensen: The threshold at which the Sorensen index is highest.
  \item max_fpb: The threshold at which FPB is highest.
  \item sensitivity: Threshold based on a specified sensitivity value used to fit the models.
  \item all: All the threshold used in the model outputs used in 'models' argument will be used.
  }
Usage thr = c('lpt', 'max_sens_spec', 'max_jaccard'), thr=c('lpt', 'max_sens_spec',
'sensitivity'), or thr='all'. If no threshold is specified (i.e., thr = NULL) function
will return continuous prediction only. Default NULL}

\item{con_thr}{logical. If true predictions with suitability values above threshold/s will be
returned. Default = FALSE}

\item{predict_area}{SpatVector, SpatialPolygon, or SpatialPolygonDataFrame. Spatial polygon
used for restring prediction into only a given region. Default = NULL}

\item{clamp}{logical. It is set with TRUE, predictors and features are restricted to the range
seen during model training. Only valid for Maxent model (see tune_mx and fit_mx). Default TRUE.}

\item{pred_type}{character. Type of response required available "link", "exponential",
"cloglog" and "logistic". Only valid for Maxent model (see tune_mx and fit_mx).
Default "cloglog".}
}
\value{
A list of SpatRaster with continuous and/or binary predictions
}
\description{
This function allows the geographical prediction of one or more models constructed
with the fit_ or tune_ function set, models fitted with esm_ function set (i.e., ensemble of
small models approach), or models constructed with fit_ensemble function. It can return
continuous or continuous and binary predictions for one or more thresholds
}
\examples{
\dontrun{
require(dplyr)
require(terra)

data("spp")
somevar <- system.file("external/somevar.tif", package = "flexsdm")
somevar <- terra::rast(somevar)

# Extract data
some_sp <- spp \%>\%
  filter(species == "sp3")

some_sp <-
  sdm_extract(
    data = some_sp,
    x = "x",
    y = "y",
    env_layer = somevar
  )

# Partition
some_sp <- part_random(
  data = some_sp,
  pr_ab = "pr_ab",
  method = c(method = "rep_kfold", folds = 3, replicates = 5)
)


## \%######################################################\%##
#                                                          #
####          Create different type of models           ####
#                                                          #
## \%######################################################\%##
# Fit some models
mglm <- fit_glm(
  data = some_sp,
  response = "pr_ab",
  predictors = c("CFP_1", "CFP_2", "CFP_3", "CFP_4"),
  partition = ".part",
  poly = 2
)
mraf <- fit_raf(
  data = some_sp,
  response = "pr_ab",
  predictors = c("CFP_1", "CFP_2", "CFP_3", "CFP_4"),
  partition = ".part",
)
mgbm <- fit_gbm(
  data = some_sp,
  response = "pr_ab",
  predictors = c("CFP_1", "CFP_2", "CFP_3", "CFP_4"),
  partition = ".part"
)

# Fit an ensemble model
mensemble <- fit_ensemble(
  models = list(mglm, mraf, mgbm),
  ens_method = "meansup",
  thr = NULL,
  thr_model = "max_sens_spec",
  metric = "TSS"
)

# Fit a model with the Ensembles of Small Models approach
# Without threshold specification and with kfold
msmall <- esm_gam(
  data = some_sp,
  response = "pr_ab",
  predictors = c("CFP_1", "CFP_2", "CFP_3", "CFP_4"),
  partition = ".part",
  thr = NULL
)


## \%######################################################\%##
#                                                           #
####      Predict different kind of models               ####
#                                                           #
## \%######################################################\%##

# sdm_predict can be used for predict one or more models fitted with fit_ or tune_ functions

# a single model
ind_p <- sdm_predict(
  models = mglm,
  pred = somevar,
  thr = "max_fpb",
  con_thr = FALSE,
  predict_area = NULL
)

# a list of models
list_p <- sdm_predict(
  models = list(mglm, mraf, mgbm),
  pred = somevar,
  thr = "max_fpb",
  con_thr = FALSE,
  predict_area = NULL
)

# Predict an ensemble model
# (only is possilbe use one fit_ensemble)
ensemble_p <- sdm_predict(
  models = mensemble,
  pred = somevar,
  thr = "max_fpb",
  con_thr = FALSE,
  predict_area = NULL
)

# Predict an ensemble of small models
# (only is possible to use one ensemble of small models)
small_p <- sdm_predict(
  models = msmall,
  pred = somevar,
  thr = "max_fpb",
  con_thr = FALSE,
  predict_area = NULL
)

## \%######################################################\%##
#                                                          #
####              Predict model using chunks            ####
#                                                          #
## \%######################################################\%##
# Predicting models in chunks helps reduce memory requirements in
# cases where models are predicted for large scales and high resolution

ind_p <- sdm_predict(
  models = mglm,
  pred = somevar,
  thr = "max_fpb",
  con_thr = FALSE,
  predict_area = NULL,
  nchunk = 4
)
}

}
\seealso{
\code{\link{sdm_uncertainty}}
}
